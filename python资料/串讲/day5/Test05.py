# #函数   3件事
# # 调用者，定义者 1：方法的作用（功能）【方法体】
# #              2.参数：别人需要给你点啥
# #              3.返回值：你需要给些人点啥
#
# print("hello world")#打印
# # 参数： 实参   形参
# def fun01(a,b,c):
#     print(a)
#     print(b)
#     print(c)
#
# # 实参的形式：位置实参
# fun01(1,2,3)
# #序列实参
# list01 = [4,5,6]
# fun01(*list01)
# # 关键字
# fun01(a= 2,b=9,c=8)
# # 字典实参
# dic01 = {"a":4,"b":5,"c":9}
# fun01(**dic01)
#
# #形参：形式化参数
# #位置形参：约束实参必须提供
# def fun02(a,b,c):
#     print(a)
#     print(b)
#     print(c)
# #默认参数 ：可以不提供
# def fun03(a = 0,b="",c = 0.0):
#     print(a)
#     print(b)
#     print(c)
#
# fun03(b= "xixi")
# #星号元组形参
# def fun04(*args):
#     print(args)
# fun04(1,2,3,4,5)
#
# #命名关键字形参, 星号元组形参后面的位置参数
# def fun05(*args,a,b):
#     print(args)
#
# fun05(1,2,3,23,a=4,b=9)
#
# #双星号字典形参
# def fun06(**kwargs):
#     print(kwargs)
#
# fun06(a=9,b=8,c=3,d=0)

# 1. 斐波那契数列：从第3项开始，每一项都等于前两项之和。
#    1, 1, 2, 3, 5, 8, 13, 21..
# 定义函数，根据长度获取斐波那契数列。
#分析  功能（方法体）    参数：别人需要给我啥(changdu)    返回值：我需要给别人什么结果

def get_Fibonacci(length):
    #获取菲波那切数列
    #参数：长度（根据长度获取）
    #返回值： 斐波那契额数列（列表）
    list01 =[1,1]
    for i in range(length-2):#循环次数由于我们的列表中有2个
        list01.append(list01[-2]+list01[-1])# 列表中最后两个相加就是后面的数值
    return list01

print(get_Fibonacci(20))
# 2. 定义函数，删除列表中所有重复的元素(重复元素只保留一个)。
# 输入：[4,35,7,64,7,35]
# 输出：[4, 35, 7, 64]
# 5.质数：大于1的整数，除了1和它本身以外不能再被其他数字整除。
#     定义函数，获取指定范围内的所有质数。
# 输入：2,20
# 输出：[2, 3, 5, 7, 11, 13, 17, 19]










































