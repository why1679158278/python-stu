前情回顾

1. 多任务编程

    程序启动后可以同时执行多个任务 （多进程  线程）

   cpu

   并发和并行

2. 进程

    进程是一个过程，任务执行的过程， 占有运行资源

    PID   进程状态   父子进程   孤儿进程  僵尸进程

    ps -aux   pstree


3. 如何创建进程

    p = Process()
    p.start()
    p.join()

    p.name  p.is_alive()  p.pid  p.daemon

练习 : 如果使用4个进程求100000以内质数之和
计算所用时间,100000分4份,每个进程求其中一份,
然后同时启动4个进程.  如果是10个进程呢?

100000分成4份   1-25000  25001--50000 ....


练习2 :  使用进程池完成
拷贝一个指定的文件夹(该文件夹下没有子目录,全是普通文件)

思路提示: os.mkdir("xxx") 创建一个文件夹
         os.listdir('xxx') 获取文件列表

         把每个文件的拷贝作为进程池要执行的一个事件

         本质将源文件夹中所有文件拷贝到新文件夹

练习3: 在练习2的基础上设计
如果在拷贝的过程中能够实时的不断打印拷贝进度
不断打印已拷贝的百分比

文件的总大小 = 所有文件大小之和

群聊聊天室

1. 需求分析 (干什么,怎么用,原型)

  * 有人进入聊天室需要输入姓名，姓名不能重复
  * 有人进入聊天室时，其他人会收到通知：xxx 进入了聊天室
  * 一个人发消息，其他人会收到：xxx ： xxxxxxxxxxx
  * 有人退出聊天室，则其他人也会收到通知:xxx退出了聊天室

2. 技术分析 : 需要什么技术去实现

   * 在服务端要存储用户信息 : 姓名 地址
      {name:address}
      [(name,address)]
      class User:
          def __init__(self,name,address):
              self.name = name
              self.address = address

   * 套接字 : udp套接字
   * 转发机制 : 客户端 --> 服务端 --> 转发给其他人
   * 客户端收发互不影响 : 多进程

3. 模块的划分 ---> 封装结构

    函数封装

    进入聊天室
    聊天
    退出聊天室

4. 协议设计 (数据结构  网络通信协议)

             请求类型      请求参数
 进入聊天室       L         name

  聊天功能        C

5. 功能模块逻辑

   框架结构的搭建
      服务端 : 1. 创建udp套接字
              2. 循环接收客户端的请求
              3. 根据请求 调用相应的模块处理

      客户端 : 1. 创建套接字
              2. 发起请求


   进入聊天室
      客户端 :  1. 输入姓名
               2. 发送给服务端  (发送请求)
               3. 等待服务端的回复
               4. 进入 / 重新输入

      服务端 :  1. 接收请求
               2. 判断是否重名
               3. 根据判断回复给客户端
               4. 重名则结束
                  允许进入: 告知其他人,存储用户信息



   聊天
   退出聊天室


6. 优化完善



作业 : 1.  进程进行总结
       2.  尝试完成进入聊天室的功能
       3.  聊天室思想总结体会










