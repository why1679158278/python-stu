前情回顾

1. 聚合操作
   聚合筛选 ： having
   聚合去重 ： distinct
   聚合运算

2. 索引

   功能 ： 提高查询效率一种方法

   使用 ： 数据量比较大，而且经常查询操作

   分类 ： 普通   唯一   主键

   create table [tb] (
   col type primary key,
   col type unique,
   index [indexName](col),
   unique  [indexName](col)
   )

   create index [indexName] on [tb](col);

   desc--> MUL  PRI  UNI
   show index from [tb];

   drop index [indexName] on [tb];

3. 外键约束

   作用：
   1.有的时候有关联的数据也不能放在一个表中，会冗余
   2.拆字段 分成不同的表 以降低冗余
   3.此时建立一个 关系字段，表达两表之前的数据关系
   4.为了约束关系字段的值和主从表之前数据的一致性，建立外键

   constraint [外键名]
   foreign key (外键字段)
   references 主表(主表主键字段)
   [级联动作]

   删除外键： alter table [tb] drop foreign key [fk_name]

   查看 ： show create table [tb]

4. 表关联关系

   一对一   一对多   多对多

   E-R模型


进阶查询练习:

create table class(cid int primary key auto_increment,
                  caption char(4) not null);

create table teacher(tid int primary key auto_increment,
                    tname varchar(32) not null);

create table student(sid int primary key auto_increment,
                    sname varchar(32) not null,
                    gender enum('male','female','others') not null default 'male',
                    class_id int,
                    foreign key(class_id) references class(cid)
                    on update cascade
                    on delete cascade);

create table course(cid int primary key auto_increment,
                   cname varchar(16) not null,
                   teacher_id int,
                   foreign key(teacher_id) references teacher(tid)
                   on update cascade
                   on delete cascade);

create table score(sid int primary key auto_increment,
                  student_id int,
                  course_id int,
                  number int(3) not null,
                  foreign key(student_id) references student(sid)
                   on update cascade
                   on delete cascade,
                   foreign key(course_id) references course(cid)
                   on update cascade
                   on delete cascade);

insert into class(caption) values('三年二班'),('三年三班'),('三年一班');
insert into teacher(tname) values('波多老师'),('苍老师'),('小泽老师');
insert into student(sname,gender,class_id) values('钢蛋','female',1),('铁锤','female',1),('山炮','male',2),('彪哥','male',3);
insert into course(cname,teacher_id) values('生物',1),('体育',1),('物理',2);
insert into score(student_id,course_id,number) values(1,1,60),(1,2,59),(2,2,100),(3,2,78),(4,3,66);

1. 查询每位老师教授的课程数量
2. 查询学生的信息及学生所在班级信息
3. 查询各科成绩最高和最低的分数,形式 : 课程ID  最高分  最低分
4. 查询平均成绩大于85分的所有学生学号,姓名和平均成绩
5. 查询课程编号为2且课程成绩在80以上的学生学号和姓名
6. 查询各个课程及相应的选修人数

作业 ： 1. 课上没有完成的练习自己完成
       2. 编写一个存储过程，传入一个学生姓名
          通过外部的用户变量得到这个学生的成绩

          编写一个函数，掺入两个学生的ID
          返回两个学生的分数只差

       3. 函数 和 类 复习





