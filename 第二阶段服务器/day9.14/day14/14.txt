前情回顾

1. 自定义进程类

   继承Process
   重写__init__,super()加载父类__init__
   重写run方法

2. 进程池技术

   解决问题: 解决进程频繁创建销毁带来的计算机压力

   Pool()
   apply_async()
   close()
   join()

3. 消息队列  (进程间通信 IPC)

   Queue()
   q.put()
   q.get()

4. 聊天室


1. 需求分析 (干什么,怎么用,原型)

  * 有人进入聊天室需要输入姓名，姓名不能重复
  * 有人进入聊天室时，其他人会收到通知：xxx 进入了聊天室
  * 一个人发消息，其他人会收到：xxx ： xxxxxxxxxxx
  * 有人退出聊天室，则其他人也会收到通知:xxx退出了聊天室

2. 技术分析 : 需要什么技术去实现

   * 在服务端要存储用户信息 : 姓名 地址
      {name:address}
      [(name,address)]
      class User:
          def __init__(self,name,address):
              self.name = name
              self.address = address

   * 套接字 : udp套接字
   * 转发机制 : 客户端 --> 服务端 --> 转发给其他人
   * 客户端收发互不影响 : 多进程

3. 模块的划分 ---> 封装结构

    函数封装

    进入聊天室
    聊天
    退出聊天室

4. 协议设计 (数据结构  网络通信协议)

             请求类型      请求参数
 进入聊天室       L         name

  聊天功能        C       name  消息内容

  退出           E          name

  成功 : OK   失败 : FAIL

5. 功能模块逻辑

   框架结构的搭建
      服务端 : 1. 创建udp套接字
              2. 循环接收客户端的请求
              3. 根据请求 调用相应的模块处理

      客户端 : 1. 创建套接字
              2. 发起请求


   进入聊天室
      客户端 :  1. 输入姓名
               2. 发送给服务端  (发送请求)
               3. 等待服务端的回复
               4. 进入 / 重新输入

      服务端 :  1. 接收请求
               2. 判断是否重名
               3. 根据判断回复给客户端
               4. 重名则结束
                  允许进入: 告知其他人,存储用户信息

   聊天
      客户端 : 1. 创建子进程
              2. 子进程循环的接收消息
              3. 父进程循环的发送消息

      服务端 : 1. 接收请求  C
              2. 将消息转发给其他人


   退出聊天室
      客户端 : 输入 exit表示退出
              发送请求
              调用 sys.exit()

      服务端 : 接收请求
              删除用户
              告知其他用户


6. 优化完善


cookie :

 class A:
     def __init__(self,age):
         self.__age = age
         self.name = "Tom"

     def setAge(self,age):
         if age < 0:
            print("你干嘛呢?")
         else:
            self.__age = age

     def getAge(self):
         return self.__age

 a = A()

 a.setAge(-1999)

 a.name = "Jame"

练习1:  模拟一个售票系统
有 500 张门票 记为 T1---T500 存入到一个列表里

创建 10 个线程 同时进行售票 ,知道所有的票都卖完

票需要按照顺序卖出

每出一张打印 w1 --- T256 每出一张票需要sleep(0.1)


作业 :  1. 创建两个线程,同时执行
           一个线程打印 A---Z
           一个线程打印 1--52
           要求打印顺序为 12A34B56C...5152Z

           提示: 使用同步互斥方法

        2. 10万以内质数之和,分别记录时间
           单进程
           4个进程
           4个线程 求, 记录时间

        3. 线程创建方法









