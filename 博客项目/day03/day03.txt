一 day02 回顾

1. URL与URI的区别与联系：
URL称为统一资源定位符，URI称为统一资源标识符。URL是URI的一种，URL是通过定位符
作为资源的标识。除此之外，还可以用其他方式作为资源的标识符。
2. 我们这次使用flask表示的前端的页面，为了能够更好的页面代码的调试。但是，不要认为
    flask是一个前端框架。其实，flask和Django的角色是一样的，都是python的后端框架。
3. 后端服务：127.0.0.1:8000，前端服务:127.0.0.1:5000。
    用户在地址栏，输入url，前端服务返回页面；在页面中，包含Js代码，通过Ajax向后端
    异步请求，后端通过Model访问数据库，把结果封装成JSON格式，响应给前端。整个页面
    完整显示。
 
4.用户模块
   4.1 实际的开发，最先确定的是数据库结构。对于我们用户模块，增加一个手机字段。 
   4.2  api 或者说url ，前端与后端交互的url的设计
          
   4.3 前端的ajax异步提交，后端的视图函数的处理，返回Json数据。
   4.4 FBV vs  CBV
         FBV -如果同一个url，请求方式少(1个或2个)，选择FBV。
         CBV -如果同一个url，请求方式多(2个或以上)，选择CBV。
   4.5 内部错误码的设计：
         用户名被占用： 10100
         两次密码不一致: 10101 
5. 错误总结：
    5.1 如果开始编码时，测试跨域是成功的，随后出现跨域不成功，重启8000服务。
    5.2 前端页面有没有被缓存，修改后的页面有没有被正确加载。
    5.3 为了调试前端的js代码，最好禁用缓存，防止旧的页面被缓存。每次操作前，检查页面             源码是否是修改后的。如果还看不到修改后的页面，换个浏览器，例如：Chrome。
    5.4 前端js代码，alert或console.log。
    5.5 后端print，看打印结果
    5.6 在调试窗口中，网络标签，响应信息，点击对应的行，看请求和响应信息。

6. 三阶段课下的项目任务布置

二 day03

1. 注册
  "创建并登录”，注册后，记录用户的信息，免登录。用什么方式去存储这个信息？把注册成功的用户信息存在什么地方？
    使用token存储，存储在浏览器的本地存储。本地存储不会自动提交，这样就防止了CSRF。
2. 登录
    验证后，记录用户的信息,创建了 token 资源。
    如果：
    POST  http://127.0.0.1:8000/v1/tokens
    token单独的创建一个应用去实现

3. 查看并修改用户信息
    3.1 哪些页面用到了用户信息？
          1> about.html页面
                用户输入的 url : http://127.0.0.1:5000/tedu/info ，获取about.html页面
                在页面中，ajax请求，
                http://127.0.0.1:8000/v1/users/"+ blog_username(地址栏的用户名)
                前端异步提交的url:   GET v1/users/tedu，后端返回Json格式的数据。
                可以浏览任何博主的信息。

          2> change_info.html页面
                用户输入的url : http://127.0.0.1:5000/tedu/change_info,获取change_info.html                  页面 ，在页面中，ajax请求
                http://127.0.0.1:8000/v1/users/"+ username, (本地存储的用户名)
                修改的不能是任意的，只能是登录的用户信息。
          两者向后端发送的ajax GET请求,请求的url是一样的，视图函数的处理也是一样的。

               需求：获取指定字段的值,后端以json的格式返回，错误的忽略，不给敏感信息。
                         http://127.0.0.1:5000/tedu?sign=1&info=1
                         通过反射可以得到对象的元数据。智能提示也是使用反射技术实现的。  
                         
               
    3.2 查看用户信息(GET)
          GET v1/users   获取所有用户信息
          GET v1/users/username  查看指定用户
          这两个请求使用的都是视图类的get方法？  
        
    3.3 修改用户信息(PUT)
          3.2.0 编写一个登陆认证的装饰器          
                   
          3.2.1 单独上传修改用户头像(POST)
                  url：http://127.0.0.1:8000/v1/users/' + username + '/avatar'   
                  post请求

          3.2.2 修改其他信息(PUT)
   
    
   
   





 


   








